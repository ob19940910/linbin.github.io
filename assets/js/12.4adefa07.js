(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{415:function(t,_,a){t.exports=a.p+"assets/img/redBlackTree.7e66566a.png"},466:function(t,_,a){"use strict";a.r(_);var r=a(1),v=Object(r.a)({},(function(){var t=this,_=t._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h2",{attrs:{id:"_1-二叉搜索树的缺陷"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-二叉搜索树的缺陷"}},[t._v("#")]),t._v(" 1.二叉搜索树的缺陷")]),t._v(" "),_("p",[t._v("当插入的数据是有序的数据，就会造成二叉搜索树的深度过大。比如原二叉搜索树右 20 22 21 组成，加入了 9 8 7 6 5 4 3 2 则变成了一边倒")]),t._v(" "),_("h2",{attrs:{id:"_2-非平衡树"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-非平衡树"}},[t._v("#")]),t._v(" 2.非平衡树")]),t._v(" "),_("p",[t._v("插入连续数据后，二叉搜索树中的数据分布就变得不均匀了，我们称这种树为非平衡树")]),t._v(" "),_("blockquote",[_("p",[t._v("对于一棵平衡二叉树来说，插入/查找等操作的效率是O（logN）\n对于一棵非平衡二叉树来说，相当于编写了一个链表，查找效率变成了O（N")])]),t._v(" "),_("h2",{attrs:{id:"_3-常见平衡树"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-常见平衡树"}},[t._v("#")]),t._v(" 3.常见平衡树")]),t._v(" "),_("p",[t._v("为了能以较快的时间O（logN）来操作一棵树，我们需要保证树总是平衡,要求树中每个节点左边的子孙节点的个数，应该尽可能地等于右边的子孙节点的个数"),_("br"),t._v("\nAVL树：是最早的一种平衡树，它通过在每个节点多存储一个额外的数据来保持树的平衡。由于AVL树是平衡树，所以它的时间复杂度也是O（logN）。但是它的整体效率不如红黑树，开发中比较少用。"),_("br"),t._v("\n红黑树：同样通过一些特性来保持树的平衡，时间复杂度也是O（logN）。进行插入/删除等操作时，性能优于AVL树，所以平衡树的应用基本都是红黑树。")]),t._v(" "),_("p",[_("img",{attrs:{src:a(415),alt:"红黑树"}})]),t._v(" "),_("h2",{attrs:{id:"_4-红黑树的介绍"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-红黑树的介绍"}},[t._v("#")]),t._v(" 4.红黑树的介绍")]),t._v(" "),_("p",[t._v("规则：")]),t._v(" "),_("ol",[_("li",[t._v("节点是红色或黑色的；")]),t._v(" "),_("li",[t._v("根节点是黑色的；")]),t._v(" "),_("li",[t._v("每个叶子节点都是黑色的空节点（NIL节点）；")]),t._v(" "),_("li",[t._v("每个红色节点的两个子节点都是黑色的（从每个叶子到根的所有路径上不可能有两个连续的红色节点）；")]),t._v(" "),_("li",[t._v("从任一节点到其每个叶子节点的所有路径都包含相同数目的黑色节点；")])]),t._v(" "),_("p",[t._v("相对平衡："),_("br"),t._v("\n前面5条规则的约束确保了以下红黑树的关键特性：")]),t._v(" "),_("ol",[_("li",[t._v("从根到叶子节点的最长路径，不会超过最短路径的两倍；")]),t._v(" "),_("li",[t._v("结果就是这棵树基本是平衡的；")]),t._v(" "),_("li",[t._v("虽然没有做到绝对的平衡，但是可以保证在最坏的情况下，该树依然是高效的；")])]),t._v(" "),_("div",{staticClass:"custom-block tip"},[_("p",{staticClass:"title"}),_("p",[_("strong",[t._v("为什么可以做到最长路径不超过最短路径的两倍呢？")]),_("br"),t._v("\n规则4决定了路径上不能有两个相连的红色节点；所以最短的节点是2个黑色的节点，如果有红色节点存在，最长路径一定是红色节点和黑色节点交替而成的，并且最长路径中一定是黑色节点多于红色节点；"),_("br"),t._v("\n规则5决定了所有路径上都有相同数目的黑色节点；"),_("br"),t._v("\n这就表明了没有路径能多于其他任何路径两倍长")])]),_("h2",{attrs:{id:"_5-红黑树的插入"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_5-红黑树的插入"}},[t._v("#")]),t._v(" 5.红黑树的插入")]),t._v(" "),_("p",[_("a",{attrs:{href:"http://ahuntsun.top/navitem/algorithm/theory/notes/10.html#%E4%B8%80%E3%80%81%E7%BA%A2%E9%BB%91%E6%A0%91%E7%9A%84%E4%BA%94%E6%9D%A1%E8%A7%84%E5%88%99",target:"_blank",rel:"noopener noreferrer"}},[t._v("这篇博客讲的非常详细"),_("OutboundLink")],1)])])}),[],!1,null,null,null);_.default=v.exports}}]);